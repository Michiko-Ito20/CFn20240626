version: 2.1

executors:
  python:
    docker:
      - image: cimg/python:3.13.3  # PythonのDockerイメージを使用

commands:
  install-dependencies:
    description: "Install required dependencies"
    steps:
      - run:
          name: Install dependencies  # 依存関係をインストール
          command: |  
            # APTでインストール可能なパッケージをインストール
            sudo apt update 
            # sudo apt install -y awscli python3-boto3 python3-botocore

            sudo apt-get install -y software-properties-common
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt-get install -y ansible

            # 必要に応じてpipで追加の依存関係をインストール
            # pip install --upgrade pip  
            # pip install ansible-core>=2.13.9  # これを優先
            # pip install boto3>=1.28.0 botocore>=1.31.0 pywinrm  # 必要なバージョンを指定

  install-aws-cli:
    description: "Install AWS CLI"
    steps:
      - run:
          name: Install AWS CLI
          command: |
            sudo apt update
            sudo apt install -y awscli

  get-public-ip:
    steps:
      - run:
          name: get public ip
          command: |
            # 新しいEC2インスタンス名を使用
            EC2_PUBLIC_IP=$(aws ec2 describe-instances --filter "Name=tag:Name,Values=AnsibleStackEC2-ALB-SG-ec2-instance" --query 'Reservations[].Instances[].PublicIpAddress|[0]' --output text)
            echo "export EC2_PUBLIC_IP=${EC2_PUBLIC_IP}" >> $BASH_ENV
  setup-ssh-config:
    steps:
      - run:
          name: create ssh-config
          command: |
            # EC2_PUBLIC_IP=$(aws ec2 describe-instances --filter "Name=tag:Name,Values=AnsibleStackEC2-ALB-SG-ec2-instance" --query 'Reservations[].Instances[].PublicIpAddress|[0]' --output text)
            cat \<< EOF > ~/.ssh/config
            Host AnsibleStackEC2-ALB-SG-ec2-instance
              HostName ${EC2_PUBLIC_IP}
              IdentityFile ~/.ssh/ansible_stack_ec2_key.pem
              User ec2-user
              IdentitiesOnly yes
            Host *
              AddKeysToAgent yes
              CheckHostIP no
              StrictHostKeyChecking no
              UserKnownHostsFile=/dev/null
            EOF
            cat ~/.ssh/config
      - run:
          name: add ssh key from aws parameter store
          command: |
            mkdir -p ~/.ssh
            KeyPairID=$(aws ec2 describe-key-pairs --key-names "AnsibleStackEC2-ALB-SG-keypair" --query 'KeyPairs[].KeyPairId' --output text)
            echo "$(aws ssm get-parameter --name /ec2/keypair/${KeyPairID} --with-decryption --query Parameter.Value --output text)" > ~/.ssh/ansible_stack_ec2_key.pem
            #sed -i -e 's/"//g' ~/.ssh/ansible_stack_ec2_key.pem
            chmod 400 ~/.ssh/ansible_stack_ec2_key.pem

  check-python-version:
    # Pythonのバージョンを確認するためのコマンド
    description: "check python version"
    steps:
      - run:
          name: check python version  # Pythonのバージョンを確認
          command: |
            python --version  

jobs:
  cfn-lint:
    executor: python
    steps:
      - checkout
      - install-aws-cli  
      - run:
          name: Install cfn-lint
          command: pip install cfn-lint # pip install も run ステップで明確に
      - run:
          name: run cfn-lint
          command: |
            cfn-lint -i W3002 -t cfn/*.yml

  setup-environment:
    executor: python
    steps:
      - checkout  # リポジトリをチェックアウト
      - check-python-version # Pythonのバージョンを確認
      - install-dependencies  # commandsを呼び出し
      - install-aws-cli  # AWS CLIをインストール
      - run:
          name: Create CloudFormation Stack for VPC # VPCスタックを作成
          command: |
            aws cloudformation deploy \
              --template-file cfn/VPC2505.yml \
              --stack-name AnsibleStackVPC \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM 
      - run:
          name: Create CloudFormation Stack for EC2-ALB-SG  # EC2-ALB-SGスタックを作成
          command: |
            aws cloudformation deploy \
              --template-file cfn/EC2_ALB_SG2505.yml \
              --stack-name AnsibleStackEC2-ALB-SG \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Create CloudFormation Stack for S3 # S3スタックを作成
          command: |
            aws cloudformation deploy \
              --template-file cfn/S32505.yml \
              --stack-name Ansible-stack-bucket \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM

  ansible-playbook: # Ansibleプレイブック実行ジョブ
    executor: python
    steps:
      - checkout
      - install-dependencies  # 再度commandsでインストール
      - install-aws-cli  # 再度AWS CLIをインストール
      - get-public-ip  # EC2のパブリックIPを取得
      - setup-ssh-config  # SSH設定を行う
      - run:
          name: install galaxy role rvm
          command: |
            ansible-galaxy install rvm.ruby --roles-path ansible/roles
      - run:
          name: run ansible
          command: |
            cd ansible
            echo AnsibleStackEC2-ALB-SG-ec2-instance >> production_inventory

            echo "--- Inventory File (production_inventory) ---"
            cat production_inventory
            echo "---------------------------------------------"

            ansible-playbook -i production_inventory production_playbook.yml

workflows:
  default:
    jobs:
      - cfn-lint
      - deploy-approve: # 手動承認ジョブ
          type: approval
          requires:
            - cfn-lint
      - setup-environment:
          requires:
            - deploy-approve
      - ansible-playbook:
          requires:
            - setup-environment

