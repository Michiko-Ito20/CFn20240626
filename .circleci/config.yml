version: 2.1

orbs:
  python: circleci/python@3.1.0  # 最新バージョンのPython Orbを使用

commands:
  install-dependencies:
    description: "Install required dependencies"
    steps:
      - run:
          name: Install dependencies  # 依存関係をインストール
          # 更新、AWS CLIインストール、pipをアップグレード
          # AnsibleとAWS SDKインストール、Ansible GalaxyからAWSコレクションをインストール
          command: |  
            sudo apt update 
            sudo apt install -y python3 python3-pip awscli  
            pip3 install --upgrade pip  
            pip3 install ansible[aws] boto3 botocore  
            ansible-galaxy collection install amazon.aws --force  

jobs:
  setup-environment:
    executor:
      name: python/default
      tag: "3.8"  # Python 3.8を指定
    steps:
      - checkout  # リポジトリをチェックアウト
      - install-dependencies  # ここでcommandsを呼び出し
      - run:
          name: Verify Ansible and AnsiblePlaybook Installation # AnsibleとAnsiblePlaybookのインストール確認
          command: |
            which ansible
            ansible --version
            which ansible-playbook
            ansible-playbook --version
      - run:
          name: Check Installed Files # インストールされたファイルを確認
          # ローカルディレクトリの内容を表示
          # ローカルバイナリディレクトリの内容を表示
          command: | 
            ls -la ~/.local 
            ls -la ~/.local/bin 
      - run:
          name: Create CloudFormation Stack for VPC # VPCスタックを作成
          command: |
            aws cloudformation deploy \
              --template-file VPCtest2406.yml \
              --stack-name AnsibleStackVPC \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM 
      - run:
          name: Create CloudFormation Stack for EC2-ALB-SG  # EC2-ALB-SGスタックを作成
          command: |
            aws cloudformation deploy \
              --template-file EC2,ALB,SG2406.yml \
              --stack-name AnsibleStackEC2-ALB-SG \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Create CloudFormation Stack for RDS # RDSスタックを作成
          command: |
            aws cloudformation deploy \
              --template-file RDStest2406.yml \
              --stack-name AnsibleStackRDS \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Get EC2 Public IP and Update Inventory  # EC2のパブリックIPを取得してインベントリを更新
# EC2インスタンスの名前を指定、情報を取得、リージョンを指定、タグでフィルタリング、パブリックアドレスを指定
# 出力形式をテキストに指定
# EC2のパブリックIPが取得できなかった場合、エラーメッセージを表示
# EC2のパブリックIPが取得できた場合、インベントリファイルを作成
# EC2のパブリックIPをインベントリに追加、インベントリファイルの内容を表示
          command: |
            INSTANCE_NAME="AnsibleStackEC2-ALB-SG-ec2-instance" 
            EC2_PUBLIC_IP=$(aws ec2 describe-instances \  
              --region ap-northeast-1 \ 
              --filters "Name=tag:Name,Values=${INSTANCE_NAME}" \ 
              --query "Reservations[*].Instances[*].PublicIpAddress" \  
              --output text)  
            if [ -z "$EC2_PUBLIC_IP" ]; then  
              echo "Error: EC2 Public IP could not be retrieved." 
              exit 1
            fi  
            echo "[ec2]" > myrole/tests/inventory 
            echo "${EC2_PUBLIC_IP}" >> myrole/tests/inventory 
            cat myrole/tests/inventory  
      - run:
          name: Test Ansible Connection # Ansibleの接続テスト
          command: |
            ansible ec2 -i myrole/tests/inventory -m ping > ansible_ping_result.log
            if ! grep -q "SUCCESS" ansible_ping_result.log; then
              echo "Error: Ansible connection test failed. Check ansible_ping_result.log for details."
              exit 1
            fi
      - add_ssh_keys: # SSHキーを追加
          fingerprints: # SSHキーのフィンガープリントを指定
            - "6f:74:61:24:ee:da:cb:01:f1:e6:11:f8:b8:95:ae:38:db:32:e3:71"
      - run:
          name: Test SSH Connection # SSH接続テスト
          command: |
            ssh -o StrictHostKeyChecking=no ec2-user@${EC2_PUBLIC_IP} "echo 'Connected via SSH'" || {
              echo "Error: SSH connection failed. Verify the SSH key and instance configuration."
              exit 1
            }


  ansible-playbook: # Ansibleプレイブック実行ジョブ
    executor:
      name: python/default
      tag: "3.8"
    steps:
      - checkout
      - install-dependencies  # 再度依存関係をインストール
      - run:
          name: Verify Ansible Installation # Ansibleのインストール確認
          command: |
            which ansible
            ansible --version
            which ansible-playbook
            ansible-playbook --version
      - run:
          name: Set Ansible Roles Path  # Ansibleのロールパスを設定
          command: |
            export ANSIBLE_ROLES_PATH=./myrole  # ロールのパスを指定

  delete-cfn-stack: # スタック削除ジョブ
    executor:
      name: python/default  # Python Orbを使用
      tag: "3.8"  # Python 3.8を指定
    steps:
      - checkout  # リポジトリをチェックアウト
      - run:
          name: Delete CloudFormation Stack for RDS #RDSスタックを削除
          command: |
            aws cloudformation delete-stack \
              --stack-name AnsibleStackRDS \
              --region ap-northeast-1
      - run:
          name: Delete CloudFormation Stack for EC2-ALB-SG  #EC2-ALB-SGスタックを削除
          command: |
            aws cloudformation delete-stack \
              --stack-name AnsibleStackEC2-ALB-SG \
              --region ap-northeast-1
      - run:
          name: Delete CloudFormation Stack for VPC #VPCスタックを削除
          command: |
            aws cloudformation delete-stack \
              --stack-name AnsibleStackVPC \
              --region ap-northeast-1

workflows:
  default:
    jobs:
      - setup-environment
      - ansible-playbook:
          requires:
            - setup-environment
      - delete-cfn-stack:
          requires:
            - ansible-playbook

