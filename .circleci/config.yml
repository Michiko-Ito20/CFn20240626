version: 2.1

executors:
  python:
    docker:
      - image: cimg/python:3.13.3  # PythonのDockerイメージを使用

commands:
  install-dependencies:
    description: "Install required dependencies"
    steps:
      - run:
          name: Install dependencies  # 依存関係をインストール
          command: |  
            # APTでインストール可能なパッケージをインストール
            sudo apt update 
            sudo apt install -y awscli python3-boto3 python3-botocore  
            # Session Managerプラグインのインストール（Amazon Linux 2/Ubuntu向け）
            curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
            sudo dpkg -i session-manager-plugin.deb
            # プラグインが正しくインストールされたか確認
            session-manager-plugin --version || echo "Session Manager Plugin installation failed"

            # 必要に応じてpipで追加の依存関係をインストール
            pip install --upgrade pip  
            pip install ansible-core>=2.13.9  # これを優先
            pip install boto3>=1.28.0 botocore>=1.31.0 pywinrm  # 必要なバージョンを指定

            # 環境変数を設定してコレクションパスを確認可能にする
            export ANSIBLE_COLLECTIONS_PATH=~/.ansible/collections
            mkdir -p $ANSIBLE_COLLECTIONS_PATH

            # ansible-galaxyとansible-coreバージョンを確認
            ansible --version
            ansible-galaxy --version

            # コレクションをインストール
            ansible-galaxy collection install amazon.aws --force  
            ansible-galaxy collection install ecgalaxy.aws_ssm --force

            # インストール確認のため、パスを表示
            echo "Collection paths:"
            ansible-config dump | grep COLLECTIONS_PATH
            echo "Installed collections:"
            ansible-galaxy collection list

            # SSMプラグインを探索
            find ~/.ansible -name "*ssm*.py" -type f
            # 接続プラグインが利用可能か確認
            # ansible-doc -t connection -l | grep amazon.aws.ssm || echo "SSM plugin not found"
            # プラグイン名確認用のコマンド
            ansible-doc -t connection -l | grep -i ssm
      - run:
          name: Check available connection plugins
          command: |
            # 利用可能な接続プラグインを確認
            echo "=== Available connection plugins ==="
            ansible-doc -t connection -l | grep -i ssm
            
            # プラグインの実際の場所を確認
            echo "=== Finding aws_ssm plugin files ==="
            find ~/.ansible -name "*ssm*.py" | grep -i connection
            
            # amazon.aws コレクション内の接続プラグインを確認
            echo "=== amazon.aws connection plugins ==="
            ls -la ~/.ansible/collections/ansible_collections/amazon/aws/plugins/connection/ || echo "Directory not found"
            
            # ecgalaxy.aws_ssm コレクション内の接続プラグインを確認
            echo "=== ecgalaxy.aws_ssm connection plugins ==="
            ls -la ~/.ansible/collections/ansible_collections/ecgalaxy/aws_ssm/plugins/connection/ || echo "Directory not found"
            
            # 特定のプラグインの詳細情報を表示
            echo "=== aws_ssm plugin documentation ==="
            ansible-doc -t connection aws_ssm || echo "Plugin aws_ssm not found"
  check-python-version:
  # Pythonのバージョンを確認するためのコマンド
    description: "check python version"
    steps:
      - run:
          name: check python version  # Pythonのバージョンを確認
          command: |
            python --version  

jobs:
  setup-environment:
    executor: python
    steps:
      - checkout  # リポジトリをチェックアウト
      - check-python-version # Pythonのバージョンを確認
      - install-dependencies  # ここでcommandsを呼び出し
      - run:
          name: Verify Ansible and AnsiblePlaybook Installation # AnsibleとAnsiblePlaybookのインストール確認
          command: |
            which ansible
            ansible --version
            which ansible-playbook
            ansible-playbook --version
      - run:
          name: Check Installed Files # インストールされたファイルを確認
          command: | 
            ls -la ~/.local 
            ls -la ~/.local/bin 
      - run:
          name: Create CloudFormation Stack for VPC # VPCスタックを作成
          command: |
            aws cloudformation deploy \
              --template-file VPCtest2406.yml \
              --stack-name AnsibleStackVPC \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM 
      - run:
          name: Create CloudFormation Stack for EC2-ALB-SG  # EC2-ALB-SGスタックを作成
          command: |
            aws cloudformation deploy \
              --template-file EC2,ALB,SG2406.yml \
              --stack-name AnsibleStackEC2-ALB-SG \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM
      # - run:
      #     name: Create CloudFormation Stack for RDS # RDSスタックを作成
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file RDStest2406.yml \
      #         --stack-name AnsibleStackRDS \
      #         --region ap-northeast-1 \
      #         --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Create CloudFormation Stack for S3 # S3スタックを作成
          command: |
            aws cloudformation deploy \
              --template-file S3test2406.yml \
              --stack-name ansible-stack-bucket \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Get EC2 Instance ID and Update Inventory  # EC2のインスタンスIDを取得してインベントリを更新
          command: |
            INSTANCE_NAME="AnsibleStackEC2-ALB-SG-ec2-instance" 
            INVENTORY_FILE="/home/circleci/project/myrole/tests/inventory.ini"
            INSTANCE_ID=$(aws ec2 describe-instances \
              --region ap-northeast-1 \
              --filters "Name=tag:Name,Values=${INSTANCE_NAME}" \
              --query "Reservations[*].Instances[*].InstanceId" \
              --output text)
            if [ -z "$INSTANCE_ID" ]; then  
              echo "Error: EC2 Instance ID could not be retrieved." 
              exit 1
            fi
            cat <<EOF > $INVENTORY_FILE
            [ec2]
            $INSTANCE_ID

            [ec2:vars]
            ansible_connection=aws_ssm
            ansible_aws_ssm_region=ap-northeast-1
            ansible_python_interpreter=/usr/bin/python
            ansible_aws_ssm_bucket_name=ansible-ssm-bucket-ansible-stack-bucket
            EOF

            echo "===== inventory.ini 内容 ====="
            cat $INVENTORY_FILE
  
      - run:
          name: Create ansible.cfg file
          command: |
            # ansible.cfg ファイルを作成
            echo "[defaults]" > ansible.cfg
            echo "collections_path = ~/.ansible/collections" >> ansible.cfg
            echo "connection_plugins = ~/.ansible/collections/ansible_collections/amazon/aws/plugins/connection:~/.ansible/collections/ansible_collections/ecgalaxy/aws_ssm/plugins/connection" >> ansible.cfg
            echo "" >> ansible.cfg
            echo "[inventory]" >> ansible.cfg
            echo "enable_plugins = aws_ec2" >> ansible.cfg
            echo "" >> ansible.cfg
            echo "[connection]" >> ansible.cfg
            echo "enable_plugins = aws_ssm ecgalaxy.aws_ssm" >> ansible.cfg
            
            # 作成された設定ファイルを確認
            cat ansible.cfg
      - run:
          name: Test Ansible Connection via SSM # Ansibleの接続テスト（SSM経由）
          command: |
            ansible ec2 -i /home/circleci/project/myrole/tests/inventory.ini -m ping > ansible_ping_result.log 2>&1 || {
              echo "Error: Ansible command failed. Check ansible_ping_result.log for details."
              cat ansible_ping_result.log
              exit 1
            };  # セミコロンを追加
            
            if ! grep -q "SUCCESS" ansible_ping_result.log; then
              echo "Error: Ansible connection test failed. Check ansible_ping_result.log for details."
              cat ansible_ping_result.log
              exit 1
            fi

  ansible-playbook: # Ansibleプレイブック実行ジョブ
    executor: python
    steps:
      - checkout
      - install-dependencies  # 再度commandsでインストール
      - run:
          name: Verify Ansible Installation # Ansibleのインストール確認
          command: |
            which ansible
            ansible --version
            which ansible-playbook
            ansible-playbook --version
      - run:
          name: Set Ansible Roles Path  # Ansibleのロールパスを設定
          command: |
            export ANSIBLE_ROLES_PATH=./myrole 
      - run:
          name: Run Ansible Playbook # Ansibleプレイブックを実行
          command: |
            export ANSIBLE_COLLECTIONS_PATH=~/.ansible/collections
            export ANSIBLE_CONFIG=$(pwd)/ansible.cfg
            ansible-playbook -i /home/circleci/project/myrole/tests/inventory.ini Ansible_lesson.yml -v

  delete-cfn-stack: # スタック削除ジョブ
    executor: python  # Pythonを呼び出し
    steps:
      - checkout  # リポジトリをチェックアウト
      - run:
          name: Delete CloudFormation Stack for S3 #S3スタックを削除
          command: |
            aws cloudformation delete-stack \
              --stack-name ansible-stack-bucket \
              --region ap-northeast-1
      - run:
          name: Delete CloudFormation Stack for RDS #RDSスタックを削除
          command: |
            aws cloudformation delete-stack \
              --stack-name AnsibleStackRDS \
              --region ap-northeast-1
      - run:
          name: Delete CloudFormation Stack for EC2-ALB-SG  #EC2-ALB-SGスタックを削除
          command: |
            aws cloudformation delete-stack \
              --stack-name AnsibleStackEC2-ALB-SG \
              --region ap-northeast-1
      - run:
          name: Delete CloudFormation Stack for VPC #VPCスタックを削除
          command: |
            aws cloudformation delete-stack \
              --stack-name AnsibleStackVPC \
              --region ap-northeast-1

workflows:
  default:
    jobs:
      - setup-environment
      - ansible-playbook:
          requires:
            - setup-environment
      - delete-cfn-stack:
          requires:
            - ansible-playbook

