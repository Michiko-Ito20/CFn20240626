version: 2.1

executors:
  python:
    docker:
      - image: cimg/python:3.13.3  # PythonのDockerイメージを使用

commands:
  install-dependencies:
    description: "Install required dependencies"
    steps:
      - run:
          name: Install dependencies  # 依存関係をインストール
          command: |  
            # APTでインストール可能なパッケージをインストール
            sudo apt update 
            sudo apt install -y awscli python3-boto3 python3-botocore
            
            # 必要に応じてpipで追加の依存関係をインストール
            pip install --upgrade pip  
            pip install ansible-core>=2.13.9  # これを優先
            pip install boto3>=1.28.0 botocore>=1.31.0 pywinrm  # 必要なバージョンを指定

  install-aws-cli:
    description: "Install AWS CLI"
    steps:
      - run:
          name: Install AWS CLI
          command: |
            sudo apt update
            sudo apt install -y awscli

  check-python-version:
    # Pythonのバージョンを確認するためのコマンド
    description: "check python version"
    steps:
      - run:
          name: check python version  # Pythonのバージョンを確認
          command: |
            python --version  

jobs:
  setup-environment:
    executor: python
    steps:
      - checkout  # リポジトリをチェックアウト
      - check-python-version # Pythonのバージョンを確認
      - install-dependencies  # commandsを呼び出し
      - run:
          name: Verify Ansible and AnsiblePlaybook Installation # AnsibleとAnsiblePlaybookのインストール確認
          command: |
            which ansible
            ansible --version
            which ansible-playbook
            ansible-playbook --version
      - run:
          name: Create CloudFormation Stack for VPC # VPCスタックを作成
          command: |
            aws cloudformation deploy \
              --template-file VPCtest2406.yml \
              --stack-name AnsibleStackVPC \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM 
      - run:
          name: Create CloudFormation Stack for EC2-ALB-SG  # EC2-ALB-SGスタックを作成
          command: |
            aws cloudformation deploy \
              --template-file EC2_ALB_SG2406.yml \
              --stack-name AnsibleStackEC2-ALB-SG \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Create CloudFormation Stack for S3 # S3スタックを作成
          command: |
            aws cloudformation deploy \
              --template-file S3test2406.yml \
              --stack-name ansible-stack-bucket \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Get EC2 Public IP and Update Inventory  # EC2のパブリックIPを取得してインベントリを更新
          command: |
            INSTANCE_NAME="AnsibleStackEC2-ALB-SG-ec2-instance" 
            INVENTORY_FILE="/home/circleci/project/myrole/tests/inventory.ini"
            
            # EC2のインスタンス情報を取得
            INSTANCE_INFO=$(aws ec2 describe-instances \
              --region ap-northeast-1 \
              --filters "Name=tag:Name,Values=${INSTANCE_NAME}" \
              --query "Reservations[*].Instances[*].[InstanceId,PublicIpAddress]" \
              --output text)
              
            INSTANCE_ID=$(echo "$INSTANCE_INFO" | awk '{print $1}')
            PUBLIC_IP=$(echo "$INSTANCE_INFO" | awk '{print $2}')
            
            if [ -z "$INSTANCE_ID" ] || [ -z "$PUBLIC_IP" ]; then  
              echo "Error: EC2 Instance ID or Public IP could not be retrieved." 
              exit 1
            fi
            
            # インベントリファイルを作成
            mkdir -p "$(dirname "$INVENTORY_FILE")"
            echo "[ec2]" > "$INVENTORY_FILE"
            echo "$PUBLIC_IP" >> "$INVENTORY_FILE"
            echo "" >> "$INVENTORY_FILE"
            echo "[ec2:vars]" >> "$INVENTORY_FILE"
            echo "ansible_user=ec2-user" >> "$INVENTORY_FILE"
            echo "ansible_python_interpreter=/usr/bin/python3" >> "$INVENTORY_FILE"
            # SSHを使用するが、パスワードなしで接続できるようにする
            echo "ansible_connection=ssh" >> "$INVENTORY_FILE"
            # SSHの厳密なホストキーチェックを無効化
            echo "ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> "$INVENTORY_FILE"
            # AWS RunCommandを使用して接続するための設定（必要に応じて）
            echo "ansible_ssh_extra_args='ssm start-session --target $INSTANCE_ID --document-name AWS-StartInteractiveCommand --parameters command=\"bash -l\"'" >> "$INVENTORY_FILE"

            echo "===== inventory.ini 内容 ====="
            cat "$INVENTORY_FILE"
      - run:
          name: Create ansible.cfg file
          command: |
            # ansible.cfg ファイルを作成
            echo "[defaults]" > ansible.cfg
            echo "host_key_checking = False" >> ansible.cfg
            echo "inventory = /home/circleci/project/myrole/tests/inventory.ini" >> ansible.cfg
            echo "remote_user = ec2-user" >> ansible.cfg
            echo "timeout = 30" >> ansible.cfg
            
            echo "[ssh_connection]" >> ansible.cfg
            echo "pipelining = True" >> ansible.cfg
            echo "control_path = /tmp/ansible-ssh-%%h-%%p-%%r" >> ansible.cfg
            
            # 作成された設定ファイルを確認
            cat ansible.cfg
      - run:
          name: Test AWS Run Command to EC2 Instance # AWS Run Commandでの接続テスト
          command: |
            INSTANCE_ID=$(aws ec2 describe-instances \
              --region ap-northeast-1 \
              --filters "Name=tag:Name,Values=AnsibleStackEC2-ALB-SG-ec2-instance" \
              --query "Reservations[*].Instances[*].InstanceId" \
              --output text)
            
            # AWS SSM Run Commandを使用してインスタンスにコマンドを実行
            aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --targets "Key=InstanceIds,Values=$INSTANCE_ID" \
              --parameters '{"commands":["echo \"Hello from SSM Run Command\"","hostname","whoami"]}' \
              --region ap-northeast-1 \
              --output text
      - run:
          name: Set up SSM SSH Proxy
          command: |
            mkdir -p ~/.ssh
            echo "Host i-* mi-*
              ProxyCommand sh -c \"aws ssm start-session --target %h --document-name AWS-StartSSHSession --parameters 'portNumber=%p'\"" > ~/.ssh/config
            chmod 600 ~/.ssh/config
            
            # 確認用
            echo "=== SSH Config Content ==="
            cat ~/.ssh/config

  ansible-playbook: # Ansibleプレイブック実行ジョブ
    executor: python
    steps:
      - checkout
      - install-dependencies  # 再度commandsでインストール
      - run:
          name: Verify Ansible Installation # Ansibleのインストール確認
          command: |
            which ansible
            ansible --version
            which ansible-playbook
            ansible-playbook --version
      - run:
          name: Get EC2 Instance ID for AWS Systems Manager # EC2インスタンスIDを取得
          command: |
            INSTANCE_NAME="AnsibleStackEC2-ALB-SG-ec2-instance" 
            INSTANCE_ID=$(aws ec2 describe-instances \
              --region ap-northeast-1 \
              --filters "Name=tag:Name,Values=${INSTANCE_NAME}" \
              --query "Reservations[*].Instances[*].InstanceId" \
              --output text)
            
            if [ -z "$INSTANCE_ID" ]; then  
              echo "Error: EC2 Instance ID could not be retrieved." 
              exit 1
            fi
            
            # SSMを使ってコマンドを実行する（テスト用）
            aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --targets "Key=InstanceIds,Values=$INSTANCE_ID" \
              --parameters '{"commands":["echo \"Setting up instance for Ansible\"","yum -y update"]}' \
              --region ap-northeast-1

      # GitとNginxのインストール確認ステップ
      - run:
          name: Verify Git and Nginx Installation on EC2 via SSM # GitとNginxのインストール確認
          command: |
            INSTANCE_ID=$(aws ec2 describe-instances \
              --region ap-northeast-1 \
              --filters "Name=tag:Name,Values=AnsibleStackEC2-ALB-SG-ec2-instance" \
              --query "Reservations[*].Instances[*].InstanceId" \
              --output text)

            # GitとNginxのバージョン確認コマンドを実行
            # 改善: コマンドIDを直接取得する方法に変更
            COMMAND_ID=$(aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --targets "Key=InstanceIds,Values=$INSTANCE_ID" \
              --parameters '{"commands":["git --version","nginx -v"]}' \
              --region ap-northeast-1 \
              --comment "Verify Git and Nginx installation" \
              --query "Command.CommandId" \
              --output text)
            
            echo "Started verification command with ID: $COMMAND_ID"

            # コマンドが完了するまで待機
            echo "Waiting for verification to complete..."
            aws ssm wait command-executed \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --region ap-northeast-1

            echo "Command Output:"
            # 改善: 出力形式を明示的に指定
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --region ap-northeast-1 \
              --query "StandardOutputContent" \
              --output text
      - run:
          name: Run Ansible Playbook Directly via SSM SSH
          command: |
            ansible-playbook myrole/tests/Ansible_lesson.yml -i myrole/tests/inventory.ini

workflows:
  default:
    jobs:
      - setup-environment
      - ansible-playbook:
          requires:
            - setup-environment

