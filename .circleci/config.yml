version: 2.1

orbs:
  python: circleci/python@3.1.0  # 最新バージョンのPython Orbを使用

commands:
  install-dependencies:
    description: "Install required dependencies"
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y python3 python3-pip awscli
            pip3 install --upgrade pip
            pip3 install ansible[aws] boto3 botocore
            ansible-galaxy collection install amazon.aws --force

jobs:
  setup-environment:
    executor:
      name: python/default
      tag: "3.8"  # Python 3.8を指定
    steps:
      - checkout  # リポジトリをチェックアウト
      - install-dependencies  # ここでcommandsを呼び出し
      - run:
          name: Verify Ansible and AnsiblePlaybook Installation
          command: |
            which ansible
            ansible --version
            which ansible-playbook
            ansible-playbook --version
      - run:
          name: Check Installed Files
          command: |
            ls -la ~/.local
            ls -la ~/.local/bin
      - run:
          name: Create CloudFormation Stack for VPC
          command: |
            aws cloudformation deploy \
              --template-file VPCtest2406.yml \
              --stack-name AnsibleStackVPC \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Create CloudFormation Stack for EC2-ALB-SG
          command: |
            aws cloudformation deploy \
              --template-file EC2,ALB,SG2406.yml \
              --stack-name AnsibleStackEC2-ALB-SG \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Create CloudFormation Stack for RDS
          command: |
            aws cloudformation deploy \
              --template-file RDStest2406.yml \
              --stack-name AnsibleStackRDS \
              --region ap-northeast-1 \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Get EC2 Public IP and Update Inventory
          command: |
            INSTANCE_NAME="AnsibleStackEC2-ALB-SG-ec2-instance"
            EC2_PUBLIC_IP=$(aws ec2 describe-instances \
              --region ap-northeast-1 \
              --filters "Name=tag:Name,Values=${INSTANCE_NAME}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text)
            if [ -z "$EC2_PUBLIC_IP" ]; then
              echo "Error: EC2 Public IP could not be retrieved."
              exit 1
            fi
            echo "[ec2]" > myrole/tests/inventory
            echo "${EC2_PUBLIC_IP} ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/my-key.pem ansible_python_interpreter=/usr/bin/python3" >> myrole/tests/inventory
      - run:
          name: Test Ansible Connection
          command: |
            ansible ec2 -i myrole/tests/inventory -m ping > ansible_ping_result.log


  ansible-playbook:
    executor:
      name: python/default
      tag: "3.8"
    steps:
      - checkout
      - install-dependencies  # 再度依存関係をインストール
      - run:
          name: Verify Ansible Installation
          command: |
            which ansible
            ansible --version
            which ansible-playbook
            ansible-playbook --version
      - run:
          name: Set Ansible Roles Path
          command: |
            export ANSIBLE_ROLES_PATH=./myrole
      - run:
          name: Run Ansible Playbook
          command: |
            ansible-playbook -i myrole/tests/inventory -c local Ansible_lesson.yml

  delete-cfn-stack:
    executor:
      name: python/default
      tag: "3.8"
    steps:
      - checkout  # リポジトリをチェックアウト
      - run:
          name: Delete CloudFormation Stack for RDS
          command: |
            aws cloudformation delete-stack \
              --stack-name AnsibleStackRDS \
              --region ap-northeast-1
      - run:
          name: Delete CloudFormation Stack for EC2-ALB-SG
          command: |
            aws cloudformation delete-stack \
              --stack-name AnsibleStackEC2-ALB-SG \
              --region ap-northeast-1
      - run:
          name: Delete CloudFormation Stack for VPC
          command: |
            aws cloudformation delete-stack \
              --stack-name AnsibleStackVPC \
              --region ap-northeast-1

workflows:
  default:
    jobs:
      - setup-environment:
          filters:
            branches:
              ignore: []  # すべてのブランチで実行
      - ansible-playbook:
          requires:
            - setup-environment
      - delete-cfn-stack:
          requires:
            - ansible-playbook

