AWSTemplateFormatVersion: "2010-09-09"

Description: "Absible_CFn,Create-EC2,ALB,SG"         # スタックの説明

Resources:
  # EC2セキュリティグループ
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: TEST-EC2SecurityGroup           # セキュリティグループの名前
      GroupDescription: TEST-EC2SecurityGroup   # セキュリティグループの説明
      VpcId: !ImportValue lecture10-testVPC-id  # VPC IDをインポート
      SecurityGroupIngress:                     # インバウンドルール
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0                     # 全てのIPアドレスからの通信を許可
          FromPort: 443                         # HTTPS用ポート（SSM通信に必要）
          ToPort: 443
      SecurityGroupEgress:                      # アウトバウンドルール（追加）
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0                     # すべての送信先への通信を許可
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ec2-sg

  # EC2ロールとインスタンスをつなぐ
  EC2InstanceProfile:                             # IAMロールをEC2インスタンスに渡す
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"                                   # IAMロールのパス
      Roles:
        - !Ref EC2Role                            # EC2ロールを参照
      InstanceProfileName: !Sub ${AWS::StackName}-ec2-profile  # インスタンスプロファイル名

  # EC2にRoleで権限を付与
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      RoleName: !Sub ${AWS::StackName}-circleci-user-role   # IAMロール名にcircleci-userを含める
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-circleci-user-role
      AssumeRolePolicyDocument:                   # EC2がこのロールを引き受けるためのポリシー
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:                          # IAMロールにアタッチするポリシー
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore" # SSM用のポリシー
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"           # S3アクセス用のポリシー（ReadOnlyからFullAccessに変更済み）

  TestEC2Instance:  # EC2インスタンス作成
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}" # 最新のAmazon Linux 2 AMI
      KeyName: Ansible_lesson                     # SSHキー（必要に応じて削除可能）
      InstanceType: t3.micro                      # インスタンスタイプ
      IamInstanceProfile: !Ref EC2InstanceProfile             # IAMインスタンスプロファイルを参照
      InstanceInitiatedShutdownBehavior: stop     # シャットダウン時の動作
      Tenancy: default                            # デフォルトテナンシー
      NetworkInterfaces:                          # ネットワークインターフェースの設定
        - AssociatePublicIpAddress: "true"       # パブリックIPアドレスを関連付け
          DeviceIndex: "0"
          SubnetId: !ImportValue lecture10-publicsubnet01-id # サブネットIDをインポート
          GroupSet:
            - !Ref EC2SecurityGroup               # セキュリティグループを参照
          PrivateIpAddress: 10.0.0.4              # プライベートIPアドレス
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ec2-instance # インスタンスの名前タグ
      BlockDeviceMappings:                        # ストレージ設定
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 10
      UserData: !Base64 |                         # 起動時に実行するスクリプト
        #!/bin/bash
        sudo hostnamectl set-hostname TEST-LINUX-INSTANCE
        
        # ログ出力設定
        exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
        echo "=== Starting User Data Script ==="
        
        # SSM Agentの更新
        echo "=== Installing/Updating SSM Agent ==="
        sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
        sudo systemctl enable amazon-ssm-agent
        sudo systemctl start amazon-ssm-agent
        
        # S3接続テスト
        echo "=== Testing S3 Connectivity ==="
        echo "Testing general internet connectivity..."
        curl -v https://aws.amazon.com/
        
        echo "Testing S3 connectivity..."
        curl -v https://s3.amazonaws.com/
        
        echo "Testing specific S3 bucket connectivity..."
        # 実際のバケット名に変更してください
        curl -v https://ansible-stack-bucket.s3.ap-northeast-1.amazonaws.com/
        
        # S3 CLIを使ったテスト
        echo "=== Testing S3 Access with AWS CLI ==="
        # AWS CLIがインストールされていることを確認
        if ! command -v aws &> /dev/null; then
          echo "Installing AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
        fi
        
        # S3バケットのリスト表示
        echo "Listing S3 buckets..."
        aws s3 ls
        
        # 特定のバケットの内容を表示
        echo "Listing target S3 bucket contents..."
        aws s3 ls s3://ansible-stack-bucket/playbooks/ || echo "Failed to list bucket contents"
        
        echo "=== User Data Script Completed ==="

  # ALBセキュリティグループ
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-alb-sg    # ALB用セキュリティグループの名前
      GroupDescription: ALB SG                   # ALB用セキュリティグループの説明
      VpcId: !ImportValue lecture10-testVPC-id   # VPC IDをインポート
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb-sg
      SecurityGroupIngress:                      # インバウンドルール
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0                      # 全てのIPアドレスからの通信を許可
          FromPort: 80                           # HTTP用ポート
          ToPort: 80

  # ALB作成
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "application"
      Scheme: "internet-facing"
      Name: !Sub ${AWS::StackName}-alb
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-alb
      IpAddressType: ipv4
      Subnets:
        - !ImportValue lecture10-publicsubnet01-id
        - !ImportValue lecture10-publicsubnet02-id
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # ALBのリスナー設定
  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  # ALBのターゲットグループ
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-tg
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-tg
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: '200'
      VpcId: !ImportValue lecture10-testVPC-id
      TargetType: instance
      Targets:
        - Id: !Ref TestEC2Instance

Outputs:
  TestEC2Instance:
    Value: !Ref TestEC2Instance                  # EC2インスタンスIDを出力
    Export:
      Name: !Sub "${AWS::StackName}-ec2-instance-id"  # 一貫性のあるエクスポート名に修正

  EC2PublicIP:
      Description: "Public IP address of the EC2 instance"
      Value: !GetAtt TestEC2Instance.PublicIp
      Export:
        Name: !Sub "${AWS::StackName}-ec2-public-ip"

